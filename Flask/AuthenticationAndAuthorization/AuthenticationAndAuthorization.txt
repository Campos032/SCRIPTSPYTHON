# 6. Autenticação e Autorização
# Para gerenciar sessões de usuário, podemos usar Flask-Login.

# Instalação:
# pip install flask-login

# Exemplo:
from flask import Flask, render_template, redirect, url_for
from flask_login import LoginManager, UserMixin, login_required, login_user, logout_user, current_user

app = Flask(__name__)
app.secret_key = 'supersecretkey'
login_manager = LoginManager()
login_manager.init_app(app)


class User(UserMixin):
    def __init__(self, id):
        self.id = id

    @staticmethod
    def get(user_id):
        if user_id == "1":
            return User(user_id)
        return None


@login_manager.user_loader
def load_user(user_id):
    return User.get(user_id)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = User.get(request.form['user_id'])
        if user:
            login_user(user)
            return redirect(url_for('protected'))
    return render_template('login.html')


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return 'Logged out'


@app.route('/protected')
@login_required
def protected():
    return f'Logged in as: {current_user.id}'


if __name__ == '__main__':
    app.run(debug=True)
# Aqui, temos um sistema de login simples. A rota /protected só pode ser acessada por usuários autenticados.
